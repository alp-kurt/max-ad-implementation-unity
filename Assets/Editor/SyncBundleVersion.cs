#if UNITY_EDITOR
using UnityEditor;
using UnityEditor.Build;
using UnityEditor.Build.Reporting;
using UnityEngine;
using System.IO;
using System.Text.RegularExpressions;

/// <summary>
/// Keeps Unity's version fields in sync with files generated by CI:
/// - version.txt  -> PlayerSettings.bundleVersion (maps to Android versionName)
/// - versionCode.txt  -> PlayerSettings.Android.bundleVersionCode
///
/// If versionCode.txt is missing, it will derive a versionCode from version.txt using:
///   code = MAJOR*10000 + MINOR*100 + PATCH
/// This ensures a monotonic integer for Google Play uploads.
/// </summary>
public class SyncBundleVersion : IPreprocessBuildWithReport
{
    /// <summary>
    /// Determines the order in which build preprocessors are called. 0 means default/early execution.
    /// </summary>
    public int callbackOrder => 0;

    // Auto-run whenever scripts reload (after pulling a Release PR, switching branches, etc.)
    [InitializeOnLoadMethod]
    private static void AutoSyncOnReload()
    {
        // Delay a tick so Unity finishes the domain reload before touching PlayerSettings
        EditorApplication.delayCall += SyncNow;
    }

    // Manual command: Tools > Versioning > Sync from Files
    [MenuItem("Tools/Versioning/Sync from Files")]
    public static void SyncNow()
    {
        string root = Directory.GetCurrentDirectory();
        string assets = Application.dataPath;

        // Prefer Assets/version.txt; fallback to root/version.txt
        string versionPath = File.Exists(Path.Combine(assets, "version.txt"))
            ? Path.Combine(assets, "version.txt")
            : Path.Combine(root, "version.txt");

        if (!File.Exists(versionPath))
        {
            Debug.LogWarning("[Versioning] version.txt not found in Assets/ or project root; bundleVersion not changed.");
            return;
        }

        // Extract only the semver token (optionally prefixed with 'v'), ignore any trailing markers
        // Example line: "1.2.1  x-release-please-version"
        string raw = File.ReadAllText(versionPath);
        var mVer = Regex.Match(raw, @"^\s*v?(?<ver>\d+\.\d+\.\d+)", RegexOptions.Multiline);
        if (!mVer.Success)
        {
            Debug.LogWarning($"[Versioning] Could not find a semantic version in '{versionPath}'.");
            return;
        }

        string v = mVer.Groups["ver"].Value; // e.g., "1.2.1"

        if (PlayerSettings.bundleVersion != v)
        {
            PlayerSettings.bundleVersion = v;
            Debug.Log($"[Versioning] Synced PlayerSettings.bundleVersion -> {v}");
        }

        // Android versionCode: prefer explicit file; else derive from semver
        int code;
        string codePath = File.Exists(Path.Combine(assets, "versionCode.txt"))
            ? Path.Combine(assets, "versionCode.txt")
            : Path.Combine(root, "versionCode.txt");

        if (File.Exists(codePath) && int.TryParse(File.ReadAllText(codePath).Trim(), out code))
        {
            SetAndroidVersionCodeIfDifferent(code);
        }
        else
        {
            // Derive from MAJOR.MINOR.PATCH (v already parsed as pure semver)
            var m = Regex.Match(v, @"^(?<maj>\d+)\.(?<min>\d+)\.(?<pat>\d+)$");
            if (m.Success)
            {
                int maj = int.Parse(m.Groups["maj"].Value);
                int min = int.Parse(m.Groups["min"].Value);
                int pat = int.Parse(m.Groups["pat"].Value);
                code = maj * 10000 + min * 100 + pat; // e.g., 2.3.4 -> 20304
                SetAndroidVersionCodeIfDifferent(code);
            }
        }

        AssetDatabase.SaveAssets();
    }

    // Safety net: also run right before every build
    public void OnPreprocessBuild(BuildReport report) => SyncNow();

    private static void SetAndroidVersionCodeIfDifferent(int code)
    {
        if (PlayerSettings.Android.bundleVersionCode != code)
        {
            PlayerSettings.Android.bundleVersionCode = code;
            Debug.Log($"[Versioning] Synced Android bundleVersionCode -> {code}");
        }
    }
}
#endif
