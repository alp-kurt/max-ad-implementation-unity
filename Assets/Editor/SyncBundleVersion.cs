#if UNITY_EDITOR
using UnityEditor;
using UnityEditor.Build;
using UnityEditor.Build.Reporting;
using System.IO;
using System.Text.RegularExpressions;

/// <summary>
/// Keeps Unity's version fields in sync with files generated by CI:
/// - version.txt  -> PlayerSettings.bundleVersion (maps to Android versionName)
/// - versionCode.txt (optional) -> PlayerSettings.Android.bundleVersionCode
///
/// If versionCode.txt is missing, it will derive a versionCode from version.txt using:
///   code = MAJOR*10000 + MINOR*100 + PATCH
/// This ensures a monotonic integer for Google Play uploads.
/// </summary>
public class SyncBundleVersionPreprocess : IPreprocessBuildWithReport
{
    /// <summary>
    /// Determines the order in which build preprocessors are called. 0 means default/early execution.
    /// </summary>
    public int callbackOrder => 0;

    /// <summary>
    /// Keeps Unity's internal application version (Application.version) in sync with CI/CD-managed versions.
    /// </summary>
    public void OnPreprocessBuild(BuildReport report)
    {
        var root = Directory.GetCurrentDirectory();

        // 1) Sync human-readable version
        var versionPath = Path.Combine(root, "version.txt");
        if (File.Exists(versionPath))
        {
            var v = File.ReadAllText(versionPath).Trim();

            // Update if the file is not empty and differs from current bundleVersion
            if (!string.IsNullOrEmpty(v) && PlayerSettings.bundleVersion != v)
            {
                PlayerSettings.bundleVersion = v; // Update Unity's app version
                AssetDatabase.SaveAssets();
                UnityEngine.Debug.Log($"[Build] Synced bundleVersion -> {v}");
            }

            // 2) Android versionCode: prefer explicit file; else derive from semver


#if UNITY_ANDROID

            // Local holder for the versionCode we want to apply to the Android build.
            int code; // Google Play requires this to be a monotonically increasing integer.
            var codePath = Path.Combine(root, "versionCode.txt");

            // Preferred path: if versionCode.txt exists and contains a valid integer, use it as-is.
            if (File.Exists(codePath) && int.TryParse(File.ReadAllText(codePath).Trim(), out code))
            {
                SetAndroidVersionCodeIfDifferent(code);
            }
            else
            {
                // Fallback path: derive an integer versionCode from the semver in version.txt (string 'v').
                var m = Regex.Match(v, @"^(?<maj>\d+)\.(?<min>\d+)\.(?<pat>\d+)");
                if (m.Success)
                {
                    // This scheme reserves two digits for MINOR and two for PATCH (00â€“99 each).
                    // If you expect MINOR or PATCH to exceed 99, switch to a wider encoding
                    // (e.g., MAJOR*1_000_000 + MINOR*1_000 + PATCH).
                    int maj = int.Parse(m.Groups["maj"].Value);
                    int min = int.Parse(m.Groups["min"].Value);
                    int pat = int.Parse(m.Groups["pat"].Value);
                    code = maj * 10000 + min * 100 + pat;
                    SetAndroidVersionCodeIfDifferent(code);
                }
                else
                {
                    // If version.txt doesn't match MAJOR.MINOR.PATCH, we can't derive a versionCode.
                    // Build will still proceed with the current PlayerSettings.Android.bundleVersionCode.
                    UnityEngine.Debug.LogWarning($"[Build] Could not parse semver from '{v}' to derive Android versionCode.");
                }
            }
#endif
        }
        else
        {
            UnityEngine.Debug.LogWarning("[Build] version.txt not found; bundleVersion not changed.");
        }
    }


#if UNITY_ANDROID && UNITY_EDITOR

    /// <summary>
    /// Writes <see cref="PlayerSettings.Android.bundleVersionCode"/> if the value differ.
    /// </summary>
    private static void SetAndroidVersionCodeIfDifferent(int code)
        {
            if (PlayerSettings.Android.bundleVersionCode != code)
            {
                PlayerSettings.Android.bundleVersionCode = code; // Updates ProjectSettings/ProjectSettings.asset
                AssetDatabase.SaveAssets();                     // Keeps the change
                UnityEngine.Debug.Log($"[Build] Synced Android bundleVersionCode -> {code}");
            }
        }
#endif
}
#endif
